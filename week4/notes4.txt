This week focused on memory

Hexadecimals
t turns out that, by convention, the addresses for memory use the counting system hexadecimal, where there are 16 digits, 0-9 and A-F.
Recall that, in binary, each digit stood for a power of 2:
128 64 32 16  8  4  2  1
  1  1  1  1  1  1  1  1
With 8 bits, we can count up to 255.
It turns out that, in hexadecimal, we can perfectly count up to 8 binary bits with just 2 digits:
16^1 16^0
   F    F
Here, the F is a value of 15 in decimal, and each place is a power of 16, so the first F is 16^1 * 15 = 240, plus the second F with the value of 16^0 * 15 = 15, for a total of 255.
Instead of powers of 2 like binary it is with 16. 16 is significant because in memeory it is a byte.

Pointers
Covered with scanf.
pointers point towards a memory slot. whether it be a float an array or anything else
scanf("%d, &item")
the &item is the pointer
Strings also use pointers
They can be used for any type as long as its alloted memory space

Compare and copy
any type can be compared with another of its type
include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Get two integers
    int i = get_int("i: ");
    int j = get_int("j: ");

    // Compare integers
    if (i == j)
    {
        printf("Same\n");
    }
    else
    {
        printf("Different\n");
    }
}
With memory you can call to items and compare them

Valgrind
It turns out that, after we’re done with memory that we’ve allocated with malloc, we should call free (as in free(t)), which tells our computer that those bytes are no longer useful to our program, so those bytes in memory can be reused again.
If we kept running our program and allocating memory with malloc, but never freed the memory after we were done using it, we would have a memory leak, which will slow down our computer and use up more and more memory until our computer runs out.
valgrind is a command-line tool that we can use to run our program and see if it has any memory leaks. We can run valgrind on our program above with help50 valgrind ./copy and see, from the error message, that line 10, we allocated memory that we never freed (or “lost”).
So at the end, we can add a line free(t), which won’t change how our program runs, but no errors from valgrind.
Let’s take a look at memory.c:
// http://valgrind.org/docs/manual/quick-start.html#quick-start.prepare

#include <stdlib.h>

void f(void)
{
    int *x = malloc(10 * sizeof(int));
    x[10] = 0;
}

int main(void)
{
    f();
    return 0;
}
This is an example from valgrind’s documentation (valgrind is a real tool, while help50 was written specifically to help us in this course).
The function f allocates enough memory for 10 integers, and stores the address in a pointer called x. Then we try to set the 11th value of x with x[10] to 0, which goes past the array of memory we’ve allocated for our program. This is called buffer overflow, where we go past the boundaries of our buffer, or array, and into unknown memory.
valgrind will also tell us there’s an “Invalid write of size 4” for line 8, where we are indeed trying to change the value of an integer (of size 4 bytes).
And this whole time, the CS50 Library has been freeing memory it’s allocated in get_string, when our program finishes!

Swap
Swaps are significant because it forces you to make a new empty memory port so you can swap the two
#include <stdio.h>

void swap(int a, int b);

int main(void)
{
    int x = 1;
    int y = 2;

    printf("x is %i, y is %i\n", x, y);
    swap(x, y);
    printf("x is %i, y is %i\n", x, y);
}

void swap(int a, int b)
{
    int tmp = a;
    a = b;
    b = tmp;
}
It turns out that the swap function gets its own variables, a and b when they are passed in, that are copies of x and y, and so changing those values don’t change x and y in the main function.

Memory layout
https://cs50.harvard.edu/x/2020/notes/4/memory_layout.png
Malloc and realloc
File names matter as it tells the computer what to read the file as.

